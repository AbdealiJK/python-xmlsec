# all tests ignore import errors b/c mypy-testing-plugin
# can't resolve local stubs, see https://github.com/typeddjango/pytest-mypy-plugins/issues/17
- case: all-constants-are-final
  mypy_config:
    ignore_missing_imports = True
  main: |
    import xmlsec
    xmlsec.constants.DSigNs = 'fizz'   # E: Cannot assign to final name "DSigNs"
    xmlsec.constants.EncNs = 'fizz'   # E: Cannot assign to final name "EncNs"
    xmlsec.constants.KeyDataAes = xmlsec.constants.__KeyData('', '')   # E: Cannot assign to final name "KeyDataAes"
    xmlsec.constants.KeyDataDes = xmlsec.constants.__KeyData('', '')   # E: Cannot assign to final name "KeyDataDes"
    xmlsec.constants.KeyDataDsa = xmlsec.constants.__KeyData('', '')   # E: Cannot assign to final name "KeyDataDsa"
    xmlsec.constants.KeyDataEcdsa = xmlsec.constants.__KeyData('', '')   # E: Cannot assign to final name "KeyDataEcdsa"
    xmlsec.constants.KeyDataEncryptedKey = xmlsec.constants.__KeyData('', '')   # E: Cannot assign to final name "KeyDataEncryptedKey"
    xmlsec.constants.KeyDataFormatBinary = -127  # E: Cannot assign to final name "KeyDataFormatBinary"
    xmlsec.constants.KeyDataFormatCertDer = -127  # E: Cannot assign to final name "KeyDataFormatCertDer"
    xmlsec.constants.KeyDataFormatCertPem = -127  # E: Cannot assign to final name "KeyDataFormatCertPem"
    xmlsec.constants.KeyDataFormatDer = -127  # E: Cannot assign to final name "KeyDataFormatDer"
    xmlsec.constants.KeyDataFormatPem = -127  # E: Cannot assign to final name "KeyDataFormatPem"
    xmlsec.constants.KeyDataFormatPkcs12 = -127  # E: Cannot assign to final name "KeyDataFormatPkcs12"
    xmlsec.constants.KeyDataFormatPkcs8Der = -127  # E: Cannot assign to final name "KeyDataFormatPkcs8Der"
    xmlsec.constants.KeyDataFormatPkcs8Pem = -127  # E: Cannot assign to final name "KeyDataFormatPkcs8Pem"
    xmlsec.constants.KeyDataFormatUnknown = -127  # E: Cannot assign to final name "KeyDataFormatUnknown"
    xmlsec.constants.KeyDataHmac = xmlsec.constants.__KeyData('', '')  # E: Cannot assign to final name "KeyDataHmac"
    xmlsec.constants.KeyDataName = xmlsec.constants.__KeyData('', '')  # E: Cannot assign to final name "KeyDataName"
    xmlsec.constants.KeyDataRawX509Cert = xmlsec.constants.__KeyData('', '')  # E: Cannot assign to final name "KeyDataRawX509Cert"
    xmlsec.constants.KeyDataRetrievalMethod = xmlsec.constants.__KeyData('', '')  # E: Cannot assign to final name "KeyDataRetrievalMethod"
    xmlsec.constants.KeyDataRsa = xmlsec.constants.__KeyData('', '')  # E: Cannot assign to final name "KeyDataRsa"
    xmlsec.constants.KeyDataTypeAny = -127  # E: Cannot assign to final name "KeyDataTypeAny"
    xmlsec.constants.KeyDataTypeNone = -127  # E: Cannot assign to final name "KeyDataTypeNone"
    xmlsec.constants.KeyDataTypePermanent = -127  # E: Cannot assign to final name "KeyDataTypePermanent"
    xmlsec.constants.KeyDataTypePrivate = -127  # E: Cannot assign to final name "KeyDataTypePrivate"
    xmlsec.constants.KeyDataTypePublic = -127  # E: Cannot assign to final name "KeyDataTypePublic"
    xmlsec.constants.KeyDataTypeSession = -127  # E: Cannot assign to final name "KeyDataTypeSession"
    xmlsec.constants.KeyDataTypeSymmetric = -127  # E: Cannot assign to final name "KeyDataTypeSymmetric"
    xmlsec.constants.KeyDataTypeTrusted = -127  # E: Cannot assign to final name "KeyDataTypeTrusted"
    xmlsec.constants.KeyDataTypeUnknown = -127  # E: Cannot assign to final name "KeyDataTypeUnknown"
    xmlsec.constants.KeyDataValue = xmlsec.constants.__KeyData('', '')  # E: Cannot assign to final name "KeyDataValue"
    xmlsec.constants.KeyDataX509 = xmlsec.constants.__KeyData('', '')  # E: Cannot assign to final name "KeyDataX509"
    xmlsec.constants.NodeCanonicalizationMethod = 'fizz'  # E: Cannot assign to final name "NodeCanonicalizationMethod"
    xmlsec.constants.NodeCipherData = 'fizz'  # E: Cannot assign to final name "NodeCipherData"
    xmlsec.constants.NodeCipherReference = 'fizz'  # E: Cannot assign to final name "NodeCipherReference"
    xmlsec.constants.NodeCipherValue = 'fizz'  # E: Cannot assign to final name "NodeCipherValue"
    xmlsec.constants.NodeDataReference = 'fizz'  # E: Cannot assign to final name "NodeDataReference"
    xmlsec.constants.NodeDigestMethod = 'fizz'  # E: Cannot assign to final name "NodeDigestMethod"
    xmlsec.constants.NodeDigestValue = 'fizz'  # E: Cannot assign to final name "NodeDigestValue"
    xmlsec.constants.NodeEncryptedData = 'fizz'  # E: Cannot assign to final name "NodeEncryptedData"
    xmlsec.constants.NodeEncryptedKey = 'fizz'  # E: Cannot assign to final name "NodeEncryptedKey"
    xmlsec.constants.NodeEncryptionMethod = 'fizz'  # E: Cannot assign to final name "NodeEncryptionMethod"
    xmlsec.constants.NodeEncryptionProperties = 'fizz'  # E: Cannot assign to final name "NodeEncryptionProperties"
    xmlsec.constants.NodeEncryptionProperty = 'fizz'  # E: Cannot assign to final name "NodeEncryptionProperty"
    xmlsec.constants.NodeKeyInfo = 'fizz'  # E: Cannot assign to final name "NodeKeyInfo"
    xmlsec.constants.NodeKeyName = 'fizz'  # E: Cannot assign to final name "NodeKeyName"
    xmlsec.constants.NodeKeyReference = 'fizz'  # E: Cannot assign to final name "NodeKeyReference"
    xmlsec.constants.NodeKeyValue = 'fizz'  # E: Cannot assign to final name "NodeKeyValue"
    xmlsec.constants.NodeManifest = 'fizz'  # E: Cannot assign to final name "NodeManifest"
    xmlsec.constants.NodeObject = 'fizz'  # E: Cannot assign to final name "NodeObject"
    xmlsec.constants.NodeReference = 'fizz'  # E: Cannot assign to final name "NodeReference"
    xmlsec.constants.NodeReferenceList = 'fizz'  # E: Cannot assign to final name "NodeReferenceList"
    xmlsec.constants.NodeSignature = 'fizz'  # E: Cannot assign to final name "NodeSignature"
    xmlsec.constants.NodeSignatureMethod = 'fizz'  # E: Cannot assign to final name "NodeSignatureMethod"
    xmlsec.constants.NodeSignatureProperties = 'fizz'  # E: Cannot assign to final name "NodeSignatureProperties"
    xmlsec.constants.NodeSignatureValue = 'fizz'  # E: Cannot assign to final name "NodeSignatureValue"
    xmlsec.constants.NodeSignedInfo = 'fizz'  # E: Cannot assign to final name "NodeSignedInfo"
    xmlsec.constants.NodeX509Data = 'fizz'  # E: Cannot assign to final name "NodeX509Data"
    xmlsec.constants.Ns = 'fizz'  # E: Cannot assign to final name "Ns"
    xmlsec.constants.NsExcC14N = 'fizz'  # E: Cannot assign to final name "NsExcC14N"
    xmlsec.constants.NsExcC14NWithComments = 'fizz'  # E: Cannot assign to final name "NsExcC14NWithComments"
    xmlsec.constants.Soap11Ns = 'fizz'  # E: Cannot assign to final name "Soap11Ns"
    xmlsec.constants.Soap12Ns = 'fizz'  # E: Cannot assign to final name "Soap12Ns"
    xmlsec.constants.TransformAes128Cbc = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformAes128Cbc"
    xmlsec.constants.TransformAes192Cbc = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformAes192Cbc"
    xmlsec.constants.TransformAes256Cbc = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformAes256Cbc"
    xmlsec.constants.TransformDes3Cbc = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformDes3Cbc"
    xmlsec.constants.TransformDsaSha1 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformDsaSha1"
    xmlsec.constants.TransformEcdsaSha1 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformEcdsaSha1"
    xmlsec.constants.TransformEcdsaSha224 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformEcdsaSha224"
    xmlsec.constants.TransformEcdsaSha256 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformEcdsaSha256"
    xmlsec.constants.TransformEcdsaSha384 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformEcdsaSha384"
    xmlsec.constants.TransformEcdsaSha512 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformEcdsaSha512"
    xmlsec.constants.TransformEnveloped = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformEnveloped"
    xmlsec.constants.TransformExclC14N = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformExclC14N"
    xmlsec.constants.TransformExclC14NWithComments = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformExclC14NWithComments"
    xmlsec.constants.TransformHmacMd5 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformHmacMd5"
    xmlsec.constants.TransformHmacRipemd160 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformHmacRipemd160"
    xmlsec.constants.TransformHmacSha1 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformHmacSha1"
    xmlsec.constants.TransformHmacSha224 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformHmacSha224"
    xmlsec.constants.TransformHmacSha256 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformHmacSha256"
    xmlsec.constants.TransformHmacSha384 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformHmacSha384"
    xmlsec.constants.TransformHmacSha512 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformHmacSha512"
    xmlsec.constants.TransformInclC14N = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformInclC14N"
    xmlsec.constants.TransformInclC14N11 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformInclC14N11"
    xmlsec.constants.TransformInclC14N11WithComments = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformInclC14N11WithComments"
    xmlsec.constants.TransformInclC14NWithComments = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformInclC14NWithComments"
    xmlsec.constants.TransformKWAes128 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformKWAes128"
    xmlsec.constants.TransformKWAes192 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformKWAes192"
    xmlsec.constants.TransformKWAes256 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformKWAes256"
    xmlsec.constants.TransformKWDes3 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformKWDes3"
    xmlsec.constants.TransformMd5 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformMd5"
    xmlsec.constants.TransformRemoveXmlTagsC14N = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRemoveXmlTagsC14N"
    xmlsec.constants.TransformRipemd160 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRipemd160"
    xmlsec.constants.TransformRsaMd5 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRsaMd5"
    xmlsec.constants.TransformRsaOaep = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRsaOaep"
    xmlsec.constants.TransformRsaPkcs1 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRsaPkcs1"
    xmlsec.constants.TransformRsaRipemd160 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRsaRipemd160"
    xmlsec.constants.TransformRsaSha1 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRsaSha1"
    xmlsec.constants.TransformRsaSha224 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRsaSha224"
    xmlsec.constants.TransformRsaSha256 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRsaSha256"
    xmlsec.constants.TransformRsaSha384 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRsaSha384"
    xmlsec.constants.TransformRsaSha512 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformRsaSha512"
    xmlsec.constants.TransformSha1 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformSha1"
    xmlsec.constants.TransformSha224 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformSha224"
    xmlsec.constants.TransformSha256 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformSha256"
    xmlsec.constants.TransformSha384 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformSha384"
    xmlsec.constants.TransformSha512 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformSha512"
    xmlsec.constants.TransformUsageAny = -127  # E: Cannot assign to final name "TransformUsageAny"
    xmlsec.constants.TransformUsageC14NMethod = -127  # E: Cannot assign to final name "TransformUsageC14NMethod"
    xmlsec.constants.TransformUsageDSigTransform = -127  # E: Cannot assign to final name "TransformUsageDSigTransform"
    xmlsec.constants.TransformUsageDigestMethod = -127  # E: Cannot assign to final name "TransformUsageDigestMethod"
    xmlsec.constants.TransformUsageEncryptionMethod = -127  # E: Cannot assign to final name "TransformUsageEncryptionMethod"
    xmlsec.constants.TransformUsageSignatureMethod = -127  # E: Cannot assign to final name "TransformUsageSignatureMethod"
    xmlsec.constants.TransformUsageUnknown = -127  # E: Cannot assign to final name "TransformUsageUnknown"
    xmlsec.constants.TransformVisa3DHack = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformVisa3DHack"
    xmlsec.constants.TransformXPath = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformXPath"
    xmlsec.constants.TransformXPath2 = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformXPath2"
    xmlsec.constants.TransformXPointer = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformXPointer"
    xmlsec.constants.TransformXslt = xmlsec.constants.__Transform('', '', 0)  # E: Cannot assign to final name "TransformXslt"
    xmlsec.constants.TypeEncContent = 'fizz'  # E: Cannot assign to final name "TypeEncContent"
    xmlsec.constants.TypeEncElement = 'fizz'  # E: Cannot assign to final name "TypeEncElement"
    xmlsec.constants.XPath2Ns = 'fizz'  # E: Cannot assign to final name "XPath2Ns"
    xmlsec.constants.XPathNs = 'fizz'  # E: Cannot assign to final name "XPathNs"
    xmlsec.constants.XPointerNs = 'fizz'  # E: Cannot assign to final name "XPointerNs"

- case: primitive-constants-have-literal-types
  mypy_config:
    ignore_missing_imports = True
  main: |
    import xmlsec
    reveal_type(xmlsec.constants.DSigNs)  # N: Revealed type is 'Literal['http://www.w3.org/2000/09/xmldsig#']?'
    reveal_type(xmlsec.constants.EncNs)  # N: Revealed type is 'Literal['http://www.w3.org/2001/04/xmlenc#']?'
    reveal_type(xmlsec.constants.KeyDataFormatBinary)  # N: Revealed type is 'Literal[1]?'
    reveal_type(xmlsec.constants.KeyDataFormatCertDer)  # N: Revealed type is 'Literal[8]?'
    reveal_type(xmlsec.constants.KeyDataFormatCertPem)  # N: Revealed type is 'Literal[7]?'
    reveal_type(xmlsec.constants.KeyDataFormatDer)  # N: Revealed type is 'Literal[3]?'
    reveal_type(xmlsec.constants.KeyDataFormatPem)  # N: Revealed type is 'Literal[2]?'
    reveal_type(xmlsec.constants.KeyDataFormatPkcs12)  # N: Revealed type is 'Literal[6]?'
    reveal_type(xmlsec.constants.KeyDataFormatPkcs8Der)  # N: Revealed type is 'Literal[5]?'
    reveal_type(xmlsec.constants.KeyDataFormatPkcs8Pem)  # N: Revealed type is 'Literal[4]?'
    reveal_type(xmlsec.constants.KeyDataFormatUnknown)  # N: Revealed type is 'Literal[0]?'
    reveal_type(xmlsec.constants.KeyDataTypeAny)  # N: Revealed type is 'Literal[65535]?'
    reveal_type(xmlsec.constants.KeyDataTypeNone)  # N: Revealed type is 'Literal[0]?'
    reveal_type(xmlsec.constants.KeyDataTypePermanent)  # N: Revealed type is 'Literal[16]?'
    reveal_type(xmlsec.constants.KeyDataTypePrivate)  # N: Revealed type is 'Literal[2]?'
    reveal_type(xmlsec.constants.KeyDataTypePublic)  # N: Revealed type is 'Literal[1]?'
    reveal_type(xmlsec.constants.KeyDataTypeSession)  # N: Revealed type is 'Literal[8]?'
    reveal_type(xmlsec.constants.KeyDataTypeSymmetric)  # N: Revealed type is 'Literal[4]?'
    reveal_type(xmlsec.constants.KeyDataTypeTrusted)  # N: Revealed type is 'Literal[256]?'
    reveal_type(xmlsec.constants.KeyDataTypeUnknown)  # N: Revealed type is 'Literal[0]?'
    reveal_type(xmlsec.constants.NodeCanonicalizationMethod)  # N: Revealed type is 'Literal['CanonicalizationMethod']?'
    reveal_type(xmlsec.constants.NodeCipherData)  # N: Revealed type is 'Literal['CipherData']?'
    reveal_type(xmlsec.constants.NodeCipherReference)  # N: Revealed type is 'Literal['CipherReference']?'
    reveal_type(xmlsec.constants.NodeCipherValue)  # N: Revealed type is 'Literal['CipherValue']?'
    reveal_type(xmlsec.constants.NodeDataReference)  # N: Revealed type is 'Literal['DataReference']?'
    reveal_type(xmlsec.constants.NodeDigestMethod)  # N: Revealed type is 'Literal['DigestMethod']?'
    reveal_type(xmlsec.constants.NodeDigestValue)  # N: Revealed type is 'Literal['DigestValue']?'
    reveal_type(xmlsec.constants.NodeEncryptedData)  # N: Revealed type is 'Literal['EncryptedData']?'
    reveal_type(xmlsec.constants.NodeEncryptedKey)  # N: Revealed type is 'Literal['EncryptedKey']?'
    reveal_type(xmlsec.constants.NodeEncryptionMethod)  # N: Revealed type is 'Literal['EncryptionMethod']?'
    reveal_type(xmlsec.constants.NodeEncryptionProperties)  # N: Revealed type is 'Literal['EncryptionProperties']?'
    reveal_type(xmlsec.constants.NodeEncryptionProperty)  # N: Revealed type is 'Literal['EncryptionProperty']?'
    reveal_type(xmlsec.constants.NodeKeyInfo)  # N: Revealed type is 'Literal['KeyInfo']?'
    reveal_type(xmlsec.constants.NodeKeyName)  # N: Revealed type is 'Literal['KeyName']?'
    reveal_type(xmlsec.constants.NodeKeyReference)  # N: Revealed type is 'Literal['KeyReference']?'
    reveal_type(xmlsec.constants.NodeKeyValue)  # N: Revealed type is 'Literal['KeyValue']?'
    reveal_type(xmlsec.constants.NodeManifest)  # N: Revealed type is 'Literal['Manifest']?'
    reveal_type(xmlsec.constants.NodeObject)  # N: Revealed type is 'Literal['Object']?'
    reveal_type(xmlsec.constants.NodeReference)  # N: Revealed type is 'Literal['Reference']?'
    reveal_type(xmlsec.constants.NodeReferenceList)  # N: Revealed type is 'Literal['ReferenceList']?'
    reveal_type(xmlsec.constants.NodeSignature)  # N: Revealed type is 'Literal['Signature']?'
    reveal_type(xmlsec.constants.NodeSignatureMethod)  # N: Revealed type is 'Literal['SignatureMethod']?'
    reveal_type(xmlsec.constants.NodeSignatureProperties)  # N: Revealed type is 'Literal['SignatureProperties']?'
    reveal_type(xmlsec.constants.NodeSignatureValue)  # N: Revealed type is 'Literal['SignatureValue']?'
    reveal_type(xmlsec.constants.NodeSignedInfo)  # N: Revealed type is 'Literal['SignedInfo']?'
    reveal_type(xmlsec.constants.NodeX509Data)  # N: Revealed type is 'Literal['X509Data']?'
    reveal_type(xmlsec.constants.Ns)  # N: Revealed type is 'Literal['http://www.aleksey.com/xmlsec/2002']?'
    reveal_type(xmlsec.constants.NsExcC14N)  # N: Revealed type is 'Literal['http://www.w3.org/2001/10/xml-exc-c14n#']?'
    reveal_type(xmlsec.constants.NsExcC14NWithComments)  # N: Revealed type is 'Literal['http://www.w3.org/2001/10/xml-exc-c14n#WithComments']?'
    reveal_type(xmlsec.constants.Soap11Ns)  # N: Revealed type is 'Literal['http://schemas.xmlsoap.org/soap/envelope/']?'
    reveal_type(xmlsec.constants.Soap12Ns)  # N: Revealed type is 'Literal['http://www.w3.org/2002/06/soap-envelope']?'
    reveal_type(xmlsec.constants.TransformUsageAny)  # N: Revealed type is 'Literal[65535]?'
    reveal_type(xmlsec.constants.TransformUsageC14NMethod)  # N: Revealed type is 'Literal[2]?'
    reveal_type(xmlsec.constants.TransformUsageDSigTransform)  # N: Revealed type is 'Literal[1]?'
    reveal_type(xmlsec.constants.TransformUsageDigestMethod)  # N: Revealed type is 'Literal[4]?'
    reveal_type(xmlsec.constants.TransformUsageEncryptionMethod)  # N: Revealed type is 'Literal[16]?'
    reveal_type(xmlsec.constants.TransformUsageSignatureMethod)  # N: Revealed type is 'Literal[8]?'
    reveal_type(xmlsec.constants.TransformUsageUnknown)  # N: Revealed type is 'Literal[0]?'
    reveal_type(xmlsec.constants.TypeEncContent)  # N: Revealed type is 'Literal['http://www.w3.org/2001/04/xmlenc#Content']?'
    reveal_type(xmlsec.constants.TypeEncElement)  # N: Revealed type is 'Literal['http://www.w3.org/2001/04/xmlenc#Element']?'
    reveal_type(xmlsec.constants.XPath2Ns)  # N: Revealed type is 'Literal['http://www.w3.org/2002/06/xmldsig-filter2']?'
    reveal_type(xmlsec.constants.XPathNs)  # N: Revealed type is 'Literal['http://www.w3.org/TR/1999/REC-xpath-19991116']?'
    reveal_type(xmlsec.constants.XPointerNs)  # N: Revealed type is 'Literal['http://www.w3.org/2001/04/xmldsig-more/xptr']?'

- case: transform-constants-href-attribute-has-type-string
  mypy_config:
    ignore_missing_imports = True
  main: |
    import xmlsec
    reveal_type(xmlsec.constants.TransformAes128Cbc.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformAes192Cbc.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformAes256Cbc.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformDes3Cbc.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformDsaSha1.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha1.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha224.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha256.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha384.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha512.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEnveloped.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformExclC14N.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformExclC14NWithComments.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacMd5.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacRipemd160.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha1.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha224.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha256.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha384.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha512.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformInclC14N.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformInclC14N11.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformInclC14N11WithComments.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformInclC14NWithComments.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformKWAes128.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformKWAes192.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformKWAes256.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformKWDes3.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformMd5.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRemoveXmlTagsC14N.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRipemd160.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaMd5.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaOaep.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaPkcs1.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaRipemd160.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha1.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha224.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha256.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha384.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha512.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha1.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha224.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha256.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha384.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha512.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformVisa3DHack.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformXPath.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformXPath2.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformXPointer.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformXslt.href)  # N: Revealed type is 'builtins.str'

- case: transform-constants-name-attribute-has-type-string
  mypy_config:
    ignore_missing_imports = True
  main: |
    import xmlsec
    reveal_type(xmlsec.constants.TransformAes128Cbc.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformAes192Cbc.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformAes256Cbc.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformDes3Cbc.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformDsaSha1.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha1.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha224.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha256.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha384.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEcdsaSha512.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformEnveloped.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformExclC14N.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformExclC14NWithComments.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacMd5.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacRipemd160.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha1.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha224.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha256.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha384.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformHmacSha512.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformInclC14N.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformInclC14N11.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformInclC14N11WithComments.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformInclC14NWithComments.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformKWAes128.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformKWAes192.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformKWAes256.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformKWDes3.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformMd5.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRemoveXmlTagsC14N.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRipemd160.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaMd5.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaOaep.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaPkcs1.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaRipemd160.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha1.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha224.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha256.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha384.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformRsaSha512.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha1.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha224.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha256.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha384.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformSha512.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformVisa3DHack.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformXPath.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformXPath2.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformXPointer.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.TransformXslt.name)  # N: Revealed type is 'builtins.str'

- case: transform-constants-usage-attribute-has-type-int
  mypy_config:
    ignore_missing_imports = True
  main: |
    import xmlsec
    reveal_type(xmlsec.constants.TransformAes128Cbc.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformAes192Cbc.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformAes256Cbc.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformDes3Cbc.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformDsaSha1.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformEcdsaSha1.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformEcdsaSha224.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformEcdsaSha256.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformEcdsaSha384.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformEcdsaSha512.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformEnveloped.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformExclC14N.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformExclC14NWithComments.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformHmacMd5.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformHmacRipemd160.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformHmacSha1.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformHmacSha224.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformHmacSha256.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformHmacSha384.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformHmacSha512.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformInclC14N.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformInclC14N11.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformInclC14N11WithComments.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformInclC14NWithComments.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformKWAes128.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformKWAes192.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformKWAes256.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformKWDes3.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformMd5.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRemoveXmlTagsC14N.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRipemd160.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRsaMd5.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRsaOaep.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRsaPkcs1.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRsaRipemd160.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRsaSha1.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRsaSha224.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRsaSha256.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRsaSha384.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformRsaSha512.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformSha1.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformSha224.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformSha256.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformSha384.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformSha512.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformVisa3DHack.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformXPath.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformXPath2.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformXPointer.usage)  # N: Revealed type is 'builtins.int'
    reveal_type(xmlsec.constants.TransformXslt.usage)  # N: Revealed type is 'builtins.int'

- case: keydata-constants-name-attribute-has-type-string
  mypy_config:
    ignore_missing_imports = True
  main: |
    import xmlsec
    reveal_type(xmlsec.constants.KeyDataAes.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataDes.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataDsa.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataEcdsa.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataEncryptedKey.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataHmac.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataName.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataRawX509Cert.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataRetrievalMethod.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataRsa.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataValue.name)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataX509.name)  # N: Revealed type is 'builtins.str'

- case: keydata-constants-href-attribute-has-type-string
  mypy_config:
    ignore_missing_imports = True
  main: |
    import xmlsec
    reveal_type(xmlsec.constants.KeyDataAes.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataDes.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataDsa.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataEcdsa.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataEncryptedKey.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataHmac.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataName.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataRawX509Cert.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataRetrievalMethod.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataRsa.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataValue.href)  # N: Revealed type is 'builtins.str'
    reveal_type(xmlsec.constants.KeyDataX509.href)  # N: Revealed type is 'builtins.str'
